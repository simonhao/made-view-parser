/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,29],$V1=[1,25],$V2=[1,26],$V3=[1,27],$V4=[1,28],$V5=[1,18],$V6=[1,24],$V7=[1,23],$V8=[1,30],$V9=[1,21],$Va=[1,22],$Vb=[5,9,22,26,27,28,29,30,32,33,37,74,75],$Vc=[5,8,9,22,26,27,28,29,30,32,33,37,74,75],$Vd=[1,41],$Ve=[1,40],$Vf=[5,8,9,22,26,27,28,29,30,31,32,33,37,39,40,74,75],$Vg=[1,55],$Vh=[5,8,9,22,26,27,28,29,30,31,32,33,37,40,48,74,75],$Vi=[42,44],$Vj=[42,44,46,48],$Vk=[1,80],$Vl=[1,82],$Vm=[1,78],$Vn=[1,77],$Vo=[1,83],$Vp=[1,84],$Vq=[1,85],$Vr=[1,81],$Vs=[42,44,61,69],$Vt=[1,88],$Vu=[1,89],$Vv=[42,44,58,59,61,69],$Vw=[1,93],$Vx=[44,69],$Vy=[44,61];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"File":3,"Rule-List":4,"EOF":5,"Rule":6,"Qualified-Rule":7,"INDENT":8,"OUTDENT":9,"Doctype":10,"Tag":11,"Custom-Tag":12,"Code":13,"Origin":14,"Text":15,"Comment":16,"If":17,"Else":18,"ElseIf":19,"While":20,"Each":21,"EACH":22,"EACH-VALUE":23,"EACH-DATA":24,"EACH-INDEX":25,"IF":26,"ELSE":27,"ELSEIF":28,"WHILE":29,"DOCTYPE":30,"TAG-TEXT":31,"COMMENT":32,"TEXT":33,"Tag-Name":34,"Class-List":35,"Property-List":36,"IDENT":37,"Class":38,"CLASS":39,"(":40,"Property-Set":41,")":42,"Property":43,",":44,"Property-Name":45,"=":46,"JSON-Value":47,"-":48,"JSON-Reference-Value":49,"JSON-Number":50,"JSON-String":51,"JSON-Literal":52,"JSON-Reference-List":53,"JSON-Ident":54,"JSON-Object":55,"JSON-Array":56,"JSON-Reference":57,".":58,"[":59,"STRING":60,"]":61,"NUMBER":62,"JSON-Literal-Element":63,"TRUE":64,"FALSE":65,"NULL":66,"{":67,"JSON-Member-List":68,"}":69,"JSON-Member":70,":":71,"JSON-Element-List":72,"Custom-Tag-Name":73,"CODE":74,"ORIGIN":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",9:"OUTDENT",22:"EACH",23:"EACH-VALUE",24:"EACH-DATA",25:"EACH-INDEX",26:"IF",27:"ELSE",28:"ELSEIF",29:"WHILE",30:"DOCTYPE",31:"TAG-TEXT",32:"COMMENT",33:"TEXT",37:"IDENT",39:"CLASS",40:"(",42:")",44:",",46:"=",48:"-",58:".",59:"[",60:"STRING",61:"]",62:"NUMBER",64:"TRUE",65:"FALSE",66:"NULL",67:"{",69:"}",71:":",74:"CODE",75:"ORIGIN"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[6,1],[6,4],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[21,3],[21,4],[17,1],[18,1],[19,1],[20,1],[10,2],[16,1],[15,1],[11,1],[11,2],[11,2],[11,3],[11,2],[11,3],[11,3],[11,4],[34,1],[35,1],[35,2],[38,1],[36,3],[41,1],[41,3],[43,1],[43,3],[45,1],[45,3],[47,1],[47,1],[47,1],[47,1],[47,1],[49,1],[49,1],[49,1],[57,2],[57,3],[57,3],[53,2],[53,2],[50,1],[51,1],[52,1],[63,1],[63,1],[63,1],[54,1],[55,3],[68,1],[68,3],[70,3],[56,3],[72,1],[72,3],[12,1],[12,2],[12,2],[12,3],[73,3],[73,3],[13,1],[14,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      this.$ = {
        type: 'file',
        nodes: $$[$0-1]
      };

      return this.$;
    
break;
case 2:

      this.$ = {
        type: 'file',
        nodes: []
      };

      return this.$;
    
break;
case 3:

      this.$ = [$$[$0]];
    
break;
case 4: case 38:

      this.$ = $$[$0-1];
      this.$.push($$[$0]);
    
break;
case 5: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 36: case 45: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 63: case 64: case 65:
this.$ = $$[$0];
break;
case 6:

      this.$ = $$[$0-3];
      this.$.nodes = $$[$0-1];
    
break;
case 7:
this.$ =$$[$0];
break;
case 19:

      this.$ = {
        type: 'each',
        value: $$[$0-1],
        data: $$[$0]
      };
    
break;
case 20:

      this.$ = {
        type: 'each',
        value: $$[$0-2],
        index: $$[$0-1],
        data: $$[$0]
      };
    
break;
case 21:

      this.$ = {
        type: 'if',
        expr: $$[$0]
      };
    
break;
case 22:

      this.$ = {
        type: 'else',
      };
    
break;
case 23:

      this.$ = {
        type: 'elseif',
        expr: $$[$0]
      };
    
break;
case 24:

      this.$ = {
        type: 'while',
        expr: $$[$0]
      };
    
break;
case 25:

      this.$ = {
        type: 'doctype',
        val: $$[$0]
      };
    
break;
case 26:

      this.$ = {
        type: 'comment',
        val: $$[$0]
      };
    
break;
case 27:

      this.$ = {
        type: 'text',
        val: $$[$0]
      };
    
break;
case 28:

      this.$ = {
        type: 'tag',
        name: $$[$0]
      };
    
break;
case 29:

      this.$ = {
        type: 'tag',
        name: $$[$0-1],
        text: $$[$0]
      };
    
break;
case 30:

      this.$ = {
        type: 'tag',
        name: $$[$0-1],
        class_list: $$[$0]
      };
    
break;
case 31:

      this.$ = {
        type: 'tag',
        name: $$[$0-2],
        class_list: $$[$0-1],
        test: $$[$0]
      };
    
break;
case 32:

      this.$ = {
        type: 'tag',
        name: $$[$0-1],
        property_list: $$[$0]
      };
    
break;
case 33:

      this.$ = {
        type: 'tag',
        name: $$[$0-2],
        property_list: $$[$0-1],
        text: $$[$0]
      };
    
break;
case 34:

      this.$ = {
        type: 'tag',
        name: $$[$0-2],
        class_list: $$[$0-1],
        property_list: $$[$0]
      };
    
break;
case 35:

      this.$ = {
        type: 'tag',
        name: $$[$0-3],
        class_list: $$[$0-2],
        property_list: $$[$0-1],
        text: $$[$0]
      };
    
break;
case 37: case 41: case 68: case 72:
this.$ = [$$[$0]];
break;
case 39:

      this.$ = {
        type: 'class',
        val: $$[$0]
      };
    
break;
case 40:
this.$ = $$[$0-1];
break;
case 42: case 69: case 73:

      this.$ = $$[$0-2];
      this.$.push($$[$0]);
    
break;
case 43:

      this.$ = {
        type: 'property',
        name: $$[$0],
        val: true
      };
    
break;
case 44:

      this.$ = {
        type: 'property',
        name: $$[$0-2],
        val: $$[$0]
      };
    
break;
case 46: case 78: case 79:
this.$ = $$[$0-2]+$$[$0-1]+$$[$0];
break;
case 55:

      this.$ = {
        type: 'json-literal',
        val: $$[$0-1]+$$[$0]
      };
    
break;
case 56:

      this.$ = {
        type: 'json-literal',
        val: $$[$0-2]+'"'+$$[$0-1]+'"'+$$[$0]
      };
    
break;
case 57:

      this.$ = {
        type: 'json-literal',
        val: $$[$0-2]+$$[$0-1]+$$[$0]
      };
    
break;
case 58:

      this.$ = {
        type: 'json-reference-list',
        ident: $$[$0-1],
        list: [$$[$0]]
      };
    
break;
case 59:

      this.$ = $$[$0-1]
      this.$.list.push($$[$0]);
    
break;
case 60:

      this.$ = {
        type: 'json-number',
        val: $$[$0]
      };
    
break;
case 61:

      this.$ = {
        type: 'json-string',
        val: $$[$0]
      };
    
break;
case 62:

      this.$ = {
        type: 'json-literal',
        val: $$[$0]
      };
    
break;
case 66:

      this.$ = {
        type: 'json-ident',
        val: $$[$0]
      };
    
break;
case 67:

      this.$ = {
        type: 'json-object',
        member: $$[$0-1]
      };
    
break;
case 70:

      this.$ = {
        type: 'json-member',
        name: $$[$0-2],
        val: $$[$0]
      };
    
break;
case 71:

      this.$ = {
        type: 'json-array',
        element: $$[$0-1]
      };
    
break;
case 74:

      this.$ = {
        type: 'custom-tag',
        name: $$[$0]
      };
    
break;
case 75:

      this.$ = {
        type: 'custom-tag',
        name: $$[$0-1],
        text: $$[$0]
      };
    
break;
case 76:

      this.$ = {
        type: 'custom-tag',
        name: $$[$0-1],
        option: $$[$0]
      };
    
break;
case 77:

      this.$ = {
        type: 'custom-tag',
        name: $$[$0-2],
        option: $$[$0-1],
        text: $$[$0]
      };
    
break;
case 80:

      this.$ = {
        type: 'code',
        val: $$[$0]
      };
    
break;
case 81:

      this.$ = {
        type: 'origin',
        val: $$[$0]
      };
    
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5,32:$V6,33:$V7,34:19,37:$V8,73:20,74:$V9,75:$Va},{1:[3]},{5:[1,31],6:32,7:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5,32:$V6,33:$V7,34:19,37:$V8,73:20,74:$V9,75:$Va},{1:[2,2]},o($Vb,[2,3]),o($Vb,[2,5],{8:[1,33]}),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,14]),o($Vc,[2,15]),o($Vc,[2,16]),o($Vc,[2,17]),o($Vc,[2,18]),{31:[1,34]},o($Vc,[2,28],{35:36,36:37,38:39,31:[1,35],39:$Vd,40:$Ve,48:[1,38]}),o($Vc,[2,74],{36:43,31:[1,42],40:$Ve,48:[1,44]}),o($Vc,[2,80]),o($Vc,[2,81]),o($Vc,[2,27]),o($Vc,[2,26]),o($Vc,[2,21]),o($Vc,[2,22]),o($Vc,[2,23]),o($Vc,[2,24]),{23:[1,45]},o([5,8,9,22,26,27,28,29,30,31,32,33,37,39,40,48,74,75],[2,36]),{1:[2,1]},o($Vb,[2,4]),{4:46,6:4,7:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5,32:$V6,33:$V7,34:19,37:$V8,73:20,74:$V9,75:$Va},o($Vc,[2,25]),o($Vc,[2,29]),o($Vc,[2,30],{36:48,38:49,31:[1,47],39:$Vd,40:$Ve}),o($Vc,[2,32],{31:[1,50]}),{34:51,37:$V8},o($Vf,[2,37]),{37:$Vg,41:52,43:53,45:54},o($Vf,[2,39]),o($Vc,[2,75]),o($Vc,[2,76],{31:[1,56]}),{34:57,37:$V8},{24:[1,58],25:[1,59]},{6:32,7:5,9:[1,60],10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5,32:$V6,33:$V7,34:19,37:$V8,73:20,74:$V9,75:$Va},o($Vc,[2,31]),o($Vc,[2,34],{31:[1,61]}),o($Vf,[2,38]),o($Vc,[2,33]),o($Vh,[2,78]),{42:[1,62],44:[1,63]},o($Vi,[2,41]),o($Vi,[2,43],{46:[1,64],48:[1,65]}),o($Vj,[2,45]),o($Vc,[2,77]),o($Vh,[2,79]),o($Vc,[2,19]),{24:[1,66]},o($Vb,[2,6]),o($Vc,[2,35]),o([5,8,9,22,26,27,28,29,30,31,32,33,37,74,75],[2,40]),{37:$Vg,43:67,45:54},{37:$Vk,47:68,49:69,50:70,51:71,52:72,53:73,54:74,55:75,56:76,59:$Vl,60:$Vm,62:$Vn,63:79,64:$Vo,65:$Vp,66:$Vq,67:$Vr},{37:[1,86]},o($Vc,[2,20]),o($Vi,[2,42]),o($Vi,[2,44]),o($Vs,[2,47],{57:87,58:$Vt,59:$Vu}),o($Vs,[2,48]),o($Vs,[2,49]),o($Vs,[2,50]),o($Vs,[2,51],{57:90,58:$Vt,59:$Vu}),o($Vv,[2,52]),o($Vv,[2,53]),o($Vv,[2,54]),o($Vs,[2,60]),o($Vs,[2,61]),o($Vs,[2,62]),o($Vv,[2,66]),{37:$Vw,68:91,70:92},{37:$Vk,47:95,49:69,50:70,51:71,52:72,53:73,54:74,55:75,56:76,59:$Vl,60:$Vm,62:$Vn,63:79,64:$Vo,65:$Vp,66:$Vq,67:$Vr,72:94},o($Vs,[2,63]),o($Vs,[2,64]),o($Vs,[2,65]),o($Vj,[2,46]),o($Vv,[2,58]),{37:[1,96]},{60:[1,97],62:[1,98]},o($Vv,[2,59]),{44:[1,100],69:[1,99]},o($Vx,[2,68]),{71:[1,101]},{44:[1,103],61:[1,102]},o($Vy,[2,72]),o($Vv,[2,55]),{61:[1,104]},{61:[1,105]},o($Vv,[2,67]),{37:$Vw,70:106},{37:$Vk,47:107,49:69,50:70,51:71,52:72,53:73,54:74,55:75,56:76,59:$Vl,60:$Vm,62:$Vn,63:79,64:$Vo,65:$Vp,66:$Vq,67:$Vr},o($Vv,[2,71]),{37:$Vk,47:108,49:69,50:70,51:71,52:72,53:73,54:74,55:75,56:76,59:$Vl,60:$Vm,62:$Vn,63:79,64:$Vo,65:$Vp,66:$Vq,67:$Vr},o($Vv,[2,56]),o($Vv,[2,57]),o($Vx,[2,69]),o($Vx,[2,70]),o($Vy,[2,73])],
defaultActions: {3:[2,2],31:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
  global.indent_stack = global.indent_stack || [0];

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
    this.begin('STATE-EACH');
    return 22;
  
break;
case 1:
    yy_.yytext = yy_.yytext.substring(2).trim();
    return 26;
  
break;
case 2:
    yy_.yytext = yy_.yytext.substring(7).trim();
    return 28;
  
break;
case 3:
    yy_.yytext = yy_.yytext.substring(4).trim();
    return 27;
  
break;
case 4:
    yy_.yytext = yy_.yytext.substring(5).trim();
    return 29;
  
break;
case 5:
    return 30;
  
break;
case 6:
    return 37;
  
break;
case 7:
    yy_.yytext = yy_.yytext.substring(1).trim();
    return 74;
  
break;
case 8:
    return 48;
  
break;
case 9:
    yy_.yytext = yy_.yytext.substring(1);
    return 39;
  
break;
case 10:
    this.begin('STATE-ORIGIN');
    this.unput('\n');
  
break;
case 11:
    this.begin('STATE-PROPERTY');
    return 40;
  
break;
case 12:
    yy_.yytext = yy_.yytext.substring(1).trim();
    return 33;
  
break;
case 13:
    yy_.yytext = yy_.yytext.trim();
    return 31;
  
break;
case 14:
    yy_.yytext = yy_.yytext.substring(2).trim();
    return 32;
  
break;
case 15:
    yy_.yytext = yy_.yytext.substring(1).trim();
    return 25;
  
break;
case 16:
    this.popState();

    yy_.yytext = yy_.yytext.substring(2).trim();
    return 24;
  
break;
case 17:
    yy_.yytext = yy_.yytext.trim();
    return 23;
  
break;
case 18:
    /* ignore whitespace and newline */
  
break;
case 19:
    return 37;
  
break;
case 20:
    yy_.yytext = yy_.yytext.substring(1, yy_.yytext.length-1);
    return 60;
  
break;
case 21:
    return "NUMBER";
  
break;
case 22:
    return 48
  
break;
case 23:
    return ".";
  
break;
case 24:
    return "{";
  
break;
case 25:
    return "}";
  
break;
case 26:
    return "[";
  
break;
case 27:
    return "]";
  
break;
case 28:
    return ",";
  
break;
case 29:
    return ":";
  
break;
case 30:
    return "=";
  
break;
case 31:
    return 64;
  
break;
case 32:
    return 65;
  
break;
case 33:
    return 66;
  
break;
case 34:
    this.popState();
    return 42;
  
break;
case 35:
    /* ignore blank line */
    this.unput('\n');
  
break;
case 36:
    if((yy_.yyleng-1) <= indent_stack[0]){
      this.popState();

      var unput_char = [];

      while((yy_.yyleng-1) < indent_stack[0]){
        indent_stack.shift();
        unput_char.push('<<OUTDENT>>');
      }

      if(unput_char.length){
        this.unput(unput_char.join(''));
      }
    }
  
break;
case 37:
    return 75;
  
break;
case 38:
    this.begin('STATE-INDENT');
  
break;
case 39:
    /* ignore blank line */
  
break;
case 40:
    this.popState();

    if(yy_.yyleng > indent_stack[0]){
      indent_stack.unshift(yy_.yyleng);
      return 8;
    }else if(yy_.yyleng < indent_stack[0]){
      var unput_char = [];

      while(yy_.yyleng < indent_stack[0]){
        indent_stack.shift();
        unput_char.push('<<OUTDENT>>');
      }

      this.unput(unput_char.join(''));
    }
  
break;
case 41:
    return 9;
  
break;
case 42:
    if(indent_stack[0] > 0){
      var unput_char = [];

      while(indent_stack[0] > 0){
        indent_stack.shift();
        unput_char.push('<<OUTDENT>>');
      }

      this.unput(unput_char.join(''));
    }else{
      return 5;
    }
  
break;
}
},
rules: [/^(?:(each\b)(( )|(\t))+)/,/^(?:(if\b)(( )|(\t))+[^\r\n\f]*)/,/^(?:(else if\b)(( )|(\t))+[^\r\n\f]*)/,/^(?:(else\b)(( )|(\t))+[^\r\n\f]*)/,/^(?:(while\b)(( )|(\t))+[^\r\n\f]*)/,/^(?:(doctype\b))/,/^(?:(([_$a-zA-Z])(([_$a-zA-Z])|([0-9]))*))/,/^(?:(-)(( )|(\t))+[^\r\n\f]*)/,/^(?:(-))/,/^(?:(\.)(([_$a-zA-Z])((([_$a-zA-Z])|([0-9]))|[-])*))/,/^(?:(\.)(( )|(\t))*(\r\n|\n|\r|\f))/,/^(?:(\())/,/^(?:(\|)[^\r\n\f]*)/,/^(?:(( )|(\t))+[^\r\n\f]*)/,/^(?:(\/\/)(( )|(\t))+[^\r\n\f]*)/,/^(?:,(( )|(\t))*(([_$a-zA-Z])(([_$a-zA-Z])|([0-9]))*)(( )|(\t))+)/,/^(?:in(( )|(\t))+[^\r\n\f]*)/,/^(?:(([_$a-zA-Z])(([_$a-zA-Z])|([0-9]))*)(( )|(\t))*)/,/^(?:(( )|(\t))|(\r\n|\n|\r|\f))/,/^(?:(([_$a-zA-Z])(([_$a-zA-Z])|([0-9]))*))/,/^(?:(("([^\n\r\f\\"]|\\(\r\n|\n|\r|\f))*")|('([^\n\r\f\\']|\\(\r\n|\n|\r|\f))*')))/,/^(?:([+-]?([0-9]+|[0-9]*\.[0-9]+)(e[+-]?[0-9]+)?))/,/^(?:(-))/,/^(?:\.)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:(true\b))/,/^(?:(false\b))/,/^(?:(null\b))/,/^(?:(\)))/,/^(?:(\r\n|\n|\r|\f)(( )|(\t))*(\r\n|\n|\r|\f))/,/^(?:(\r\n|\n|\r|\f)(( )|(\t))*)/,/^(?:[^\r\n\f]*)/,/^(?:(\r\n|\n|\r|\f))/,/^(?:(( )|(\t))*(\r\n|\n|\r|\f))/,/^(?:(( )|(\t))*)/,/^(?:<<OUTDENT>>)/,/^(?:$)/],
conditions: {"STATE-EACH":{"rules":[15,16,17],"inclusive":false},"STATE-PROPERTY":{"rules":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"inclusive":false},"STATE-ORIGIN":{"rules":[35,36,37],"inclusive":false},"STATE-INDENT":{"rules":[39,40],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,38,41,42],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}